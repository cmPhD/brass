function [m, initW] = getmodel(data, x, options)
    arguments
        data
        x
        options.Model {...
            mustBeMember(...
                options.Model, ...
                {'rvm-zca-linesearch', 'rvm-zca', 'linear-zca', 'linear', 'rvm-bayes'} ...
        )} = Config.Model
        options.LogFileID = 1
        options.ArdMaxIterIsError (1,1) {mustBeNumericOrLogical} = Config.ArdMaxIterIsError
    end
    import bo.initialW
    if options.Model == "rvm-zca-linesearch"
        initW = initialW(x);
        m = RVMNormRankModel(data, ...
                'rbf_sigma', x.rs, 'nCentres', x.nCen, ...
                'initialW', initW, 'OptimisationMethod', 'linesearch', ...
                'NormMethod', 'zca' ...
            );
    elseif options.Model == "rvm-zca"
        initW = initialW(x);
        m = RVMNormRankModel(data, ...
                'rbf_sigma', x.rs, 'nCentres', x.nCen, ...
                'initialW', initW, ...
                'NormMethod', 'zca' ...
            );
    elseif options.Model == "linear-zca"
            initW = initialW(x, 'sz', data.Dn + data.Dm);
            m = LinearZcaRankModel(data, ...
                'initialW', initW ...
            );
    elseif options.Model == "rvm-bayes"
        m = BayesRankModel(data, ...
            'PriorVarianceLambda', x.priorVarianceLambda, ...
            'ExpansionSigma', x.rs, 'ExpansionCentres', x.nCen, ...
            'DoSampling', Config.DoSampling, ...
            'MHBurnin', Config.MHBurnin, 'MHSamples', Config.MHSamples, ...
            'MHChains', Config.MHChains, 'MHThin', Config.MHThin, ...
            'InitWMethod', x.InitWMethod, ...
            'ExponentiatePredictedScores', Config.ExponentiatePredictedScores, ...
            'ArdMaxIterIsError', options.ArdMaxIterIsError, ...
            'LogFileID', options.LogFileID ...
        );
        initW = initialW(x);
    else
        assert(options.Model == "linear");
        initW = initialW(x, 'sz', data.Dn + data.Dm);
        m = LinearRankModel(data, ...
            'initialW', initW ...
        );
    end
end

